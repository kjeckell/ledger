service: ledger-app # NOTE: update this with your service name

# Custom Settings
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

  # Setup our DyanamoDB tables based on our stage passed in
  PlayerTableName: ${self:custom.stage}-player
  ClubTableName: ${self:custom.stage}-club

  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

resources:
  # Create DynamoDB Tables In External File
  - ${file(resources/dynamodb-tables.yml)}

# AWS Information
provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:PutItem"
        - "dynamodb:Query"
        - "dynamodb:GetItem"
      Resource:
        - "Fn::GetAtt": [ PlayerTable, Arn ] # pulled from dynamodb include file
        - "Fn::GetAtt": [ ClubTable, Arn ] # pulled from dynamodb include file

# you can define service wide environment variables here
# to use them we must import os and call with os.environ['VARNAME']
  environment:
    PlayerTableName: ${self:custom.PlayerTableName} # pulling from custom section
    ClubTableName: ${self:custom.ClubTableName}

# you can add packaging information here
# treating this as gitignore for package
package:
#  include:
#    - include-me.py
  exclude:
    - README.md
    - .gitignore
    - .vscode/**
    - .serverless/**
    - venv/**

functions:
  add-player:
    handler: player.add_player
    events:
      - http:
          path: player
          method: post
          cors: true

  get-player:
    handler: player.get_player
    events:
      - http:
          path: player
          method: get
          cors: true
  
  update-player:
    handler: player.update_player
    events:
      - http:
          path: player
          method: put
          cors: true

  get-players:
    handler: players.get_players
    events:
      - http:
          path: players
          method: get
          cors: true